@use "sass:map";

@function utility-class-name($utility-class, $utility-item-name, $breakpoint: '') {
  $classname: '#{$utilities--prefix}#{$utility-class}#{$utility-item-name}';
  @if $breakpoint != '' {
    $classname: '#{$breakpoint}\\:#{$classname}';
  }
  @return '.#{$classname}';
}

@mixin utility-styles($properties, $name, $value, $variable: null) {
  @each $property in $properties {
    $attributeString: "";
    @if $variable {
      $attributeString: "var(#{$variable}#{$name})";
    } @else {
      $attributeString: $value;
    }

    @if $utilities--important == true {
      $attributeString: "#{$attributeString} !important";
    }

    #{$property}: #{$attributeString};
  }
}

@mixin generate-utilities {
  @each $utility-class, $utility-class-data in $utilities--config {
    $name:          map.get($utility-class-data, 'name');
    $items:         map.get($utility-class-data, 'items');
    $props:         map.get($utility-class-data, 'property');
    $responsive:    map.get($utility-class-data, 'responsive');
    $variable:      map.get($utility-class-data, 'variable');

    /*==========
      @name: #{$name}
      @classname: #{utility-class-name($utility-class, null)}
      @properties: #{$props}
      @responsive: #{$responsive}
      @values: (*/
    @each $utility-item-name, $utility-item-value in $items {
      /*  #{$utility-item-name}: #{$utility-item-value}, */
    }
    /* )
    ==========*/


    @each $utility-item-name, $utility-item-value in $items {
      #{utility-class-name($utility-class, $utility-item-name)} {
        @include utility-styles($props, $utility-item-name, $utility-item-value, $variable);
      }

      @if $responsive == true {
        @each $breakpoint, $breakpoint-value in $responsive--breakpoints {
          #{utility-class-name($utility-class, $utility-item-name, $breakpoint)} {
            @include respond-to($breakpoint) {
              @include utility-styles($props, $utility-item-name, $utility-item-value, $variable);
            }
          }
        }
      }
    }
  }
}
